{"version":3,"sources":["src/index.js"],"names":["RandomShapes","HTMLElement","constructor","colors","shapesTotal","shapes","shapesContainer","undefined","connectedCallback","prepareColors","getAttribute","replaceAll","colorsAttributes","JSON","parse","Array","isArray","document","createElement","appendChild","length","count","shape","size","Math","random","classList","add","style","position","opacity","borderRadius","background","floor","left","top","transform","width","height","zIndex","animateShape","push","index","additionFrameChance","keyFrames","anim","animate","map","translate","duration","direction","fill","iterations","Infinity","easing","customElements","define"],"mappings":"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","sourceRoot":"/source_map/","sourcesContent":["// Based on https://codepen.io/nashvail/pen/wpGgXO by Nash Vail\n\nclass RandomShapes extends HTMLElement {\n  constructor() {\n    super();\n\n    this.colors = [\"#70D6FF\", \"#FF70A6\", \"#FF9770\", \"#FFD670\", \"#E9FF70\"]\n    this.shapesTotal = 50\n    \n    this.shapes = []\n    this.shapesContainer = undefined\n  }\n\n  connectedCallback() {\n    const prepareColors = this.getAttribute(\"colors\") ? this.getAttribute(\"colors\").replaceAll(\"'\", \"\\\"\") : null\n    const colorsAttributes = JSON.parse(prepareColors)\n    this.colors = Array.isArray(colorsAttributes)\n      ? colorsAttributes\n      : this.colors\n    this.shapesTotal = this.getAttribute(\"shapes-total\") || this.shapesTotal\n\n    if (this.shapesContainer === undefined) {\n      this.shapesContainer = document.createElement('div')\n      this.appendChild(this.shapesContainer)\n    }\n    if (this.shapes.length === 0) {\n      for (let count = 0; count < this.shapesTotal; count++) {\n        let shape = document.createElement(\"div\")\n        const size = Math.random() < 0.2 ? Math.random() * 10 : Math.random()\n\n        shape.classList.add(\"shape\")\n        shape.style.position = 'absolute'\n        shape.style.opacity = Math.random() * 0.7 * size\n        shape.style.borderRadius = `${Math.random() * 100}%`\n        shape.style.background = this.colors[Math.floor(Math.random() * this.colors.length)]\n        shape.style.left = `${Math.floor(Math.random() * 100)}vw`\n        shape.style.top = `${Math.floor(Math.random() * 100)}vh`\n        shape.style.transform = `scale(${Math.random()})`\n        shape.style.width = `${size}em`\n        shape.style.height = shape.style.width\n        shape.style.zIndex = Math.floor(size * 100)\n\n        this.animateShape(shape, this.shapes.length, size)\n        \n        this.shapes.push(shape)\n        this.shapesContainer.appendChild(shape)\n      }\n    }\n  }\n\n  animateShape(shape, index, size) {\n    let additionFrameChance = 0.5\n    const keyFrames = [\"translate(0, 0)\"]\n    while(keyFrames.length < 2 || Math.random() < additionFrameChance) {\n      keyFrames.push(\n        `translate(${Math.random() * (index % 2 === 0 ? -11 : 11)}rem, ${Math.random() * 12}rem)`\n      )\n      additionFrameChance *= 0.75\n    }\n    let anim = shape.animate(keyFrames.map((translate) => {\n      return {\n        transform: translate\n      }\n    }),\n      {\n        duration: (Math.random() + 1) * (2000 * size),\n        direction: Math.random() > 0.5 ? \"alternate\" : \"alternate-reverse\",\n        fill: \"both\",\n        iterations: Infinity,\n        easing: \"ease-in-out\"\n      }\n    )\n  }\n}\n\ncustomElements.define(\"random-shapes\", RandomShapes);\n"]}